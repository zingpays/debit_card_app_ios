//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var infoPlist: infoPlist { .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func infoPlist(preferredLanguages: [String]) -> infoPlist {
      .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.infoPlist` struct is generated, and contains static references to 2 localization keys.
    struct infoPlist {
      let source: RswiftResources.StringResource.Source

      /// en translation: DCard
      ///
      /// Key: CFBundleDisplayName
      ///
      /// Locales: en, zh-Hans
      var cfBundleDisplayName: RswiftResources.StringResource { .init(key: "CFBundleDisplayName", tableName: "InfoPlist", source: source, developmentValue: "DCard", comment: nil) }

      /// en translation: Need to use your biometric information to lock in your app.
      ///
      /// Key: NSFaceIDUsageDescription
      ///
      /// Locales: en, zh-Hans
      var nsFaceIDUsageDescription: RswiftResources.StringResource { .init(key: "NSFaceIDUsageDescription", tableName: "InfoPlist", source: source, developmentValue: "Need to use your biometric information to lock in your app.", comment: nil) }
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 2 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: We need to use your Face ID to unlock the screen
      ///
      /// Key: LocalAuthenticationFaceIdLocalizedReason
      ///
      /// Locales: en, zh-Hans
      var localAuthenticationFaceIdLocalizedReason: RswiftResources.StringResource { .init(key: "LocalAuthenticationFaceIdLocalizedReason", tableName: "Localizable", source: source, developmentValue: "We need to use your Face ID to unlock the screen", comment: nil) }

      /// en translation: We need to use your Touch ID to unlock the screen
      ///
      /// Key: LocalAuthenticationTouchIdLocalizedReason
      ///
      /// Locales: en, zh-Hans
      var localAuthenticationTouchIdLocalizedReason: RswiftResources.StringResource { .init(key: "LocalAuthenticationTouchIdLocalizedReason", tableName: "Localizable", source: source, developmentValue: "We need to use your Touch ID to unlock the screen", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 6 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `color#00191C`.
    var color00191C: RswiftResources.ColorResource { .init(name: "color#00191C", path: [], bundle: bundle) }

    /// Color `color#004396`.
    var color004396: RswiftResources.ColorResource { .init(name: "color#004396", path: [], bundle: bundle) }

    /// Color `color#008999`.
    var color008999: RswiftResources.ColorResource { .init(name: "color#008999", path: [], bundle: bundle) }

    /// Color `color#00A9B5`.
    var color00A9B5: RswiftResources.ColorResource { .init(name: "color#00A9B5", path: [], bundle: bundle) }

    /// Color `color#FFFFFF`.
    var colorFFFFFF: RswiftResources.ColorResource { .init(name: "color#FFFFFF", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 7 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `guide_bg_intro_1`.
    var guide_bg_intro_1: RswiftResources.ImageResource { .init(name: "guide_bg_intro_1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide_bg_intro_2`.
    var guide_bg_intro_2: RswiftResources.ImageResource { .init(name: "guide_bg_intro_2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide_bg_intro_3`.
    var guide_bg_intro_3: RswiftResources.ImageResource { .init(name: "guide_bg_intro_3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide_bg_intro_4`.
    var guide_bg_intro_4: RswiftResources.ImageResource { .init(name: "guide_bg_intro_4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconBack`.
    var iconBack: RswiftResources.ImageResource { .init(name: "iconBack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lanuchscreen_bg`.
    var lanuchscreen_bg: RswiftResources.ImageResource { .init(name: "lanuchscreen_bg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lanuchscreen_logo`.
    var lanuchscreen_logo: RswiftResources.ImageResource { .init(name: "lanuchscreen_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `DIN-Bold`.
    var dinBold: RswiftResources.FontResource { .init(name: "DIN-Bold", bundle: bundle, filename: "DIN Bold.ttf") }

    /// Font `DIN-Light`.
    var dinLight: RswiftResources.FontResource { .init(name: "DIN-Light", bundle: bundle, filename: "DIN Light.ttf") }

    /// Font `Roboto-Bold`.
    var robotoBold: RswiftResources.FontResource { .init(name: "Roboto-Bold", bundle: bundle, filename: "Roboto-Bold-3.ttf") }

    /// Font `Roboto-Light`.
    var robotoLight: RswiftResources.FontResource { .init(name: "Roboto-Light", bundle: bundle, filename: "Roboto-Light-10.ttf") }

    /// Font `Roboto-Medium`.
    var robotoMedium: RswiftResources.FontResource { .init(name: "Roboto-Medium", bundle: bundle, filename: "Roboto-Medium-12.ttf") }

    /// Font `Roboto-Regular`.
    var robotoRegular: RswiftResources.FontResource { .init(name: "Roboto-Regular", bundle: bundle, filename: "Roboto-Regular-14.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [dinBold, dinLight, robotoBold, robotoLight, robotoMedium, robotoRegular].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 6 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `DIN Bold.ttf`.
    var dinBoldTtf: RswiftResources.FileResource { .init(name: "DIN Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `DIN Light.ttf`.
    var dinLightTtf: RswiftResources.FileResource { .init(name: "DIN Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Bold-3.ttf`.
    var robotoBold3Ttf: RswiftResources.FileResource { .init(name: "Roboto-Bold-3", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Light-10.ttf`.
    var robotoLight10Ttf: RswiftResources.FileResource { .init(name: "Roboto-Light-10", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Medium-12.ttf`.
    var robotoMedium12Ttf: RswiftResources.FileResource { .init(name: "Roboto-Medium-12", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Regular-14.ttf`.
    var robotoRegular14Ttf: RswiftResources.FileResource { .init(name: "Roboto-Regular-14", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `GuidePagerViewCell`.
    var guidePagerViewCell: RswiftResources.NibReference<GuidePagerViewCell> { .init(name: "GuidePagerViewCell", bundle: bundle) }

    /// Nib `GuideViewController`.
    var guideViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GuideViewController", bundle: bundle) }

    /// Nib `HomeViewController`.
    var homeViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HomeViewController", bundle: bundle) }

    /// Nib `LockScreenViewController`.
    var lockScreenViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "LockScreenViewController", bundle: bundle) }

    /// Nib `RegisterViewController`.
    var registerViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "RegisterViewController", bundle: bundle) }

    /// Nib `StartExperienceViewController`.
    var startExperienceViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "StartExperienceViewController", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "guide_bg_intro_3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'guide_bg_intro_3' is used in nib 'GuidePagerViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "color#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'color#FFFFFF' is used in nib 'GuidePagerViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "color#00A9B5", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'color#00A9B5' is used in nib 'GuideViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "colorFFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'colorFFFFFF' is used in nib 'GuideViewController', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "lanuchscreen_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'lanuchscreen_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lanuchscreen_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'lanuchscreen_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }
  }
}