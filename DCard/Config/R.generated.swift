//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var infoPlist: infoPlist { .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func infoPlist(preferredLanguages: [String]) -> infoPlist {
      .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.infoPlist` struct is generated, and contains static references to 2 localization keys.
    struct infoPlist {
      let source: RswiftResources.StringResource.Source

      /// en translation: Stella Pay
      ///
      /// Key: CFBundleDisplayName
      ///
      /// Locales: en, zh-Hans
      var cfBundleDisplayName: RswiftResources.StringResource { .init(key: "CFBundleDisplayName", tableName: "InfoPlist", source: source, developmentValue: "Stella Pay", comment: nil) }

      /// en translation: Need to use your biometric information to lock in your app.
      ///
      /// Key: NSFaceIDUsageDescription
      ///
      /// Locales: en, zh-Hans
      var nsFaceIDUsageDescription: RswiftResources.StringResource { .init(key: "NSFaceIDUsageDescription", tableName: "InfoPlist", source: source, developmentValue: "Need to use your biometric information to lock in your app.", comment: nil) }
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 98 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: We need to use your Face ID to unlock the screen
      ///
      /// Key: LocalAuthenticationFaceIdLocalizedReason
      ///
      /// Locales: en, zh-Hans
      var localAuthenticationFaceIdLocalizedReason: RswiftResources.StringResource { .init(key: "LocalAuthenticationFaceIdLocalizedReason", tableName: "Localizable", source: source, developmentValue: "We need to use your Face ID to unlock the screen", comment: nil) }

      /// en translation: We need to use your Touch ID to unlock the screen
      ///
      /// Key: LocalAuthenticationTouchIdLocalizedReason
      ///
      /// Locales: en, zh-Hans
      var localAuthenticationTouchIdLocalizedReason: RswiftResources.StringResource { .init(key: "LocalAuthenticationTouchIdLocalizedReason", tableName: "Localizable", source: source, developmentValue: "We need to use your Touch ID to unlock the screen", comment: nil) }

      /// en translation: About
      ///
      /// Key: about
      ///
      /// Locales: en, zh-Hans
      var about: RswiftResources.StringResource { .init(key: "about", tableName: "Localizable", source: source, developmentValue: "About", comment: nil) }

      /// en translation: Address
      ///
      /// Key: address
      ///
      /// Locales: en, zh-Hans
      var address: RswiftResources.StringResource { .init(key: "address", tableName: "Localizable", source: source, developmentValue: "Address", comment: nil) }

      /// en translation: I have read and agree with the Privacy Policy and Terms and Conditions. I also agree to not use Stella Pay to transact on behalf of someone else.
      ///
      /// Key: agreement
      ///
      /// Locales: en, zh-Hans
      var agreement: RswiftResources.StringResource { .init(key: "agreement", tableName: "Localizable", source: source, developmentValue: "I have read and agree with the Privacy Policy and Terms and Conditions. I also agree to not use Stella Pay to transact on behalf of someone else.", comment: nil) }

      /// en translation: Authenticator Code
      ///
      /// Key: authenticatorCode
      ///
      /// Locales: en, zh-Hans
      var authenticatorCode: RswiftResources.StringResource { .init(key: "authenticatorCode", tableName: "Localizable", source: source, developmentValue: "Authenticator Code", comment: nil) }

      /// en translation: Enter the 6-digit code from Google Authenticator
      ///
      /// Key: authenticatorCodeInfo
      ///
      /// Locales: en, zh-Hans
      var authenticatorCodeInfo: RswiftResources.StringResource { .init(key: "authenticatorCodeInfo", tableName: "Localizable", source: source, developmentValue: "Enter the 6-digit code from Google Authenticator", comment: nil) }

      /// en translation: Enter authenticator code
      ///
      /// Key: authenticatorCodePlaceholder
      ///
      /// Locales: en, zh-Hans
      var authenticatorCodePlaceholder: RswiftResources.StringResource { .init(key: "authenticatorCodePlaceholder", tableName: "Localizable", source: source, developmentValue: "Enter authenticator code", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: cancel
      ///
      /// Locales: en, zh-Hans
      var cancel: RswiftResources.StringResource { .init(key: "cancel", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: CARD
      ///
      /// Key: card
      ///
      /// Locales: en, zh-Hans
      var card: RswiftResources.StringResource { .init(key: "card", tableName: "Localizable", source: source, developmentValue: "CARD", comment: nil) }

      /// en translation: Enter the initial letter
      ///
      /// Key: chooseYourCountryInputPlaceholder
      ///
      /// Locales: en, zh-Hans
      var chooseYourCountryInputPlaceholder: RswiftResources.StringResource { .init(key: "chooseYourCountryInputPlaceholder", tableName: "Localizable", source: source, developmentValue: "Enter the initial letter", comment: nil) }

      /// en translation: Choose Your Country
      ///
      /// Key: chooseYourCountryTitle
      ///
      /// Locales: en, zh-Hans
      var chooseYourCountryTitle: RswiftResources.StringResource { .init(key: "chooseYourCountryTitle", tableName: "Localizable", source: source, developmentValue: "Choose Your Country", comment: nil) }

      /// en translation: Continue
      ///
      /// Key: continue
      ///
      /// Locales: en, zh-Hans
      var `continue`: RswiftResources.StringResource { .init(key: "continue", tableName: "Localizable", source: source, developmentValue: "Continue", comment: nil) }

      /// en translation: Contract Us
      ///
      /// Key: contractUs
      ///
      /// Locales: en, zh-Hans
      var contractUs: RswiftResources.StringResource { .init(key: "contractUs", tableName: "Localizable", source: source, developmentValue: "Contract Us", comment: nil) }

      /// en translation: E-mail format is incorrect
      ///
      /// Key: emailErrorTips
      ///
      /// Locales: en, zh-Hans
      var emailErrorTips: RswiftResources.StringResource { .init(key: "emailErrorTips", tableName: "Localizable", source: source, developmentValue: "E-mail format is incorrect", comment: nil) }

      /// en translation: · E-mail format is incorrect
      ///
      /// Key: emailIsIncorrectTips
      ///
      /// Locales: en, zh-Hans
      var emailIsIncorrectTips: RswiftResources.StringResource { .init(key: "emailIsIncorrectTips", tableName: "Localizable", source: source, developmentValue: "· E-mail format is incorrect", comment: nil) }

      /// en translation: Email Verification Code
      ///
      /// Key: emailVerificationCode
      ///
      /// Locales: en, zh-Hans
      var emailVerificationCode: RswiftResources.StringResource { .init(key: "emailVerificationCode", tableName: "Localizable", source: source, developmentValue: "Email Verification Code", comment: nil) }

      /// en translation: Enter the code
      ///
      /// Key: emailVerificationCodePlaceholder
      ///
      /// Locales: en, zh-Hans
      var emailVerificationCodePlaceholder: RswiftResources.StringResource { .init(key: "emailVerificationCodePlaceholder", tableName: "Localizable", source: source, developmentValue: "Enter the code", comment: nil) }

      /// en translation: Enter your E-mail
      ///
      /// Key: emialInputPlaceholder
      ///
      /// Locales: en, zh-Hans
      var emialInputPlaceholder: RswiftResources.StringResource { .init(key: "emialInputPlaceholder", tableName: "Localizable", source: source, developmentValue: "Enter your E-mail", comment: nil) }

      /// en translation: Enter your E-mail
      ///
      /// Key: enterEmailInputPlaceholder
      ///
      /// Locales: en, zh-Hans
      var enterEmailInputPlaceholder: RswiftResources.StringResource { .init(key: "enterEmailInputPlaceholder", tableName: "Localizable", source: source, developmentValue: "Enter your E-mail", comment: nil) }

      /// en translation: Enter password
      ///
      /// Key: enterPassword
      ///
      /// Locales: en, zh-Hans
      var enterPassword: RswiftResources.StringResource { .init(key: "enterPassword", tableName: "Localizable", source: source, developmentValue: "Enter password", comment: nil) }

      /// en translation: Enter password again
      ///
      /// Key: enterPasswordAgain
      ///
      /// Locales: en, zh-Hans
      var enterPasswordAgain: RswiftResources.StringResource { .init(key: "enterPasswordAgain", tableName: "Localizable", source: source, developmentValue: "Enter password again", comment: nil) }

      /// en translation: Enter verification code
      ///
      /// Key: enterVerificationCodePlaceholder
      ///
      /// Locales: en, zh-Hans
      var enterVerificationCodePlaceholder: RswiftResources.StringResource { .init(key: "enterVerificationCodePlaceholder", tableName: "Localizable", source: source, developmentValue: "Enter verification code", comment: nil) }

      /// en translation: Face ID
      ///
      /// Key: faceID
      ///
      /// Locales: en, zh-Hans
      var faceID: RswiftResources.StringResource { .init(key: "faceID", tableName: "Localizable", source: source, developmentValue: "Face ID", comment: nil) }

      /// en translation: Forgot password?
      ///
      /// Key: forgotPassword
      ///
      /// Locales: en, zh-Hans
      var forgotPassword: RswiftResources.StringResource { .init(key: "forgotPassword", tableName: "Localizable", source: source, developmentValue: "Forgot password?", comment: nil) }

      /// en translation: Full Name And Nationality
      ///
      /// Key: fullNameAndNationality
      ///
      /// Locales: en, zh-Hans
      var fullNameAndNationality: RswiftResources.StringResource { .init(key: "fullNameAndNationality", tableName: "Localizable", source: source, developmentValue: "Full Name And Nationality", comment: nil) }

      /// en translation: Get Code
      ///
      /// Key: getCode
      ///
      /// Locales: en, zh-Hans
      var getCode: RswiftResources.StringResource { .init(key: "getCode", tableName: "Localizable", source: source, developmentValue: "Get Code", comment: nil) }

      /// en translation: Google Authenticator Unavailable？
      ///
      /// Key: googleAuthenticatorUnavailable
      ///
      /// Locales: en, zh-Hans
      var googleAuthenticatorUnavailable: RswiftResources.StringResource { .init(key: "googleAuthenticatorUnavailable", tableName: "Localizable", source: source, developmentValue: "Google Authenticator Unavailable？", comment: nil) }

      /// en translation: Hello!
      ///
      /// Key: hello
      ///
      /// Locales: en, zh-Hans
      var hello: RswiftResources.StringResource { .init(key: "hello", tableName: "Localizable", source: source, developmentValue: "Hello!", comment: nil) }

      /// en translation: HOME
      ///
      /// Key: home
      ///
      /// Locales: en, zh-Hans
      var home: RswiftResources.StringResource { .init(key: "home", tableName: "Localizable", source: source, developmentValue: "HOME", comment: nil) }

      /// en translation: Information Required
      ///
      /// Key: informationRequired
      ///
      /// Locales: en, zh-Hans
      var informationRequired: RswiftResources.StringResource { .init(key: "informationRequired", tableName: "Localizable", source: source, developmentValue: "Information Required", comment: nil) }

      /// en translation: Language
      ///
      /// Key: language
      ///
      /// Locales: en, zh-Hans
      var language: RswiftResources.StringResource { .init(key: "language", tableName: "Localizable", source: source, developmentValue: "Language", comment: nil) }

      /// en translation: Login
      ///
      /// Key: loginTitle
      ///
      /// Locales: en, zh-Hans
      var loginTitle: RswiftResources.StringResource { .init(key: "loginTitle", tableName: "Localizable", source: source, developmentValue: "Login", comment: nil) }

      /// en translation: Log out
      ///
      /// Key: logout
      ///
      /// Locales: en, zh-Hans
      var logout: RswiftResources.StringResource { .init(key: "logout", tableName: "Localizable", source: source, developmentValue: "Log out", comment: nil) }

      /// en translation: Next
      ///
      /// Key: next
      ///
      /// Locales: en, zh-Hans
      var next: RswiftResources.StringResource { .init(key: "next", tableName: "Localizable", source: source, developmentValue: "Next", comment: nil) }

      /// en translation: Not Verified
      ///
      /// Key: notVerified
      ///
      /// Locales: en, zh-Hans
      var notVerified: RswiftResources.StringResource { .init(key: "notVerified", tableName: "Localizable", source: source, developmentValue: "Not Verified", comment: nil) }

      /// en translation: Passport
      ///
      /// Key: passport
      ///
      /// Locales: en, zh-Hans
      var passport: RswiftResources.StringResource { .init(key: "passport", tableName: "Localizable", source: source, developmentValue: "Passport", comment: nil) }

      /// en translation: . Please fill in the correct password format
      ///
      /// Key: passwordFormatIsNotCorrect
      ///
      /// Locales: en, zh-Hans
      var passwordFormatIsNotCorrect: RswiftResources.StringResource { .init(key: "passwordFormatIsNotCorrect", tableName: "Localizable", source: source, developmentValue: ". Please fill in the correct password format", comment: nil) }

      /// en translation: Enter password
      ///
      /// Key: passwordInputPlaceholder
      ///
      /// Locales: en, zh-Hans
      var passwordInputPlaceholder: RswiftResources.StringResource { .init(key: "passwordInputPlaceholder", tableName: "Localizable", source: source, developmentValue: "Enter password", comment: nil) }

      /// en translation: Password Login
      ///
      /// Key: passwordLogin
      ///
      /// Locales: en, zh-Hans
      var passwordLogin: RswiftResources.StringResource { .init(key: "passwordLogin", tableName: "Localizable", source: source, developmentValue: "Password Login", comment: nil) }

      /// en translation: . Passwords do not match
      ///
      /// Key: passwordsDoNotMatchTips
      ///
      /// Locales: en, zh-Hans
      var passwordsDoNotMatchTips: RswiftResources.StringResource { .init(key: "passwordsDoNotMatchTips", tableName: "Localizable", source: source, developmentValue: ". Passwords do not match", comment: nil) }

      /// en translation: Inconsistent unlock pattern
      ///
      /// Key: patternAgainErrorTips
      ///
      /// Locales: en, zh-Hans
      var patternAgainErrorTips: RswiftResources.StringResource { .init(key: "patternAgainErrorTips", tableName: "Localizable", source: source, developmentValue: "Inconsistent unlock pattern", comment: nil) }

      /// en translation: Change Pattern
      ///
      /// Key: patternChange
      ///
      /// Locales: en, zh-Hans
      var patternChange: RswiftResources.StringResource { .init(key: "patternChange", tableName: "Localizable", source: source, developmentValue: "Change Pattern", comment: nil) }

      /// en translation: Please draw your new pattern
      ///
      /// Key: patternChangeAgainTips
      ///
      /// Locales: en, zh-Hans
      var patternChangeAgainTips: RswiftResources.StringResource { .init(key: "patternChangeAgainTips", tableName: "Localizable", source: source, developmentValue: "Please draw your new pattern", comment: nil) }

      /// en translation: Please draw your original pattern
      ///
      /// Key: patternChangeTips
      ///
      /// Locales: en, zh-Hans
      var patternChangeTips: RswiftResources.StringResource { .init(key: "patternChangeTips", tableName: "Localizable", source: source, developmentValue: "Please draw your original pattern", comment: nil) }

      /// en translation: Forgot Pattern ?
      ///
      /// Key: patternForgot
      ///
      /// Locales: en, zh-Hans
      var patternForgot: RswiftResources.StringResource { .init(key: "patternForgot", tableName: "Localizable", source: source, developmentValue: "Forgot Pattern ?", comment: nil) }

      /// en translation: Please draw your pattern again
      ///
      /// Key: patternForgotAgainTips
      ///
      /// Locales: en, zh-Hans
      var patternForgotAgainTips: RswiftResources.StringResource { .init(key: "patternForgotAgainTips", tableName: "Localizable", source: source, developmentValue: "Please draw your pattern again", comment: nil) }

      /// en translation: New pattern setting successfully
      ///
      /// Key: patternForgotSuccess
      ///
      /// Locales: en, zh-Hans
      var patternForgotSuccess: RswiftResources.StringResource { .init(key: "patternForgotSuccess", tableName: "Localizable", source: source, developmentValue: "New pattern setting successfully", comment: nil) }

      /// en translation: Please draw your pattern
      ///
      /// Key: patternForgotTips
      ///
      /// Locales: en, zh-Hans
      var patternForgotTips: RswiftResources.StringResource { .init(key: "patternForgotTips", tableName: "Localizable", source: source, developmentValue: "Please draw your pattern", comment: nil) }

      /// en translation: At least 4 points need to be linked
      ///
      /// Key: patternFormatErrorTips
      ///
      /// Locales: en, zh-Hans
      var patternFormatErrorTips: RswiftResources.StringResource { .init(key: "patternFormatErrorTips", tableName: "Localizable", source: source, developmentValue: "At least 4 points need to be linked", comment: nil) }

      /// en translation: Pattern Login
      ///
      /// Key: patternLogin
      ///
      /// Locales: en, zh-Hans
      var patternLogin: RswiftResources.StringResource { .init(key: "patternLogin", tableName: "Localizable", source: source, developmentValue: "Pattern Login", comment: nil) }

      /// en translation: Pattern is incorrect
      ///
      /// Key: patternNotMatchOriginPatternErrorTips
      ///
      /// Locales: en, zh-Hans
      var patternNotMatchOriginPatternErrorTips: RswiftResources.StringResource { .init(key: "patternNotMatchOriginPatternErrorTips", tableName: "Localizable", source: source, developmentValue: "Pattern is incorrect", comment: nil) }

      /// en translation: Set Pattern
      ///
      /// Key: patternSet
      ///
      /// Locales: en, zh-Hans
      var patternSet: RswiftResources.StringResource { .init(key: "patternSet", tableName: "Localizable", source: source, developmentValue: "Set Pattern", comment: nil) }

      /// en translation: Please draw the unlock pattern again
      ///
      /// Key: patternSetAgainTips
      ///
      /// Locales: en, zh-Hans
      var patternSetAgainTips: RswiftResources.StringResource { .init(key: "patternSetAgainTips", tableName: "Localizable", source: source, developmentValue: "Please draw the unlock pattern again", comment: nil) }

      /// en translation: Please draw the unlock pattern
      ///
      /// Key: patternSetTips
      ///
      /// Locales: en, zh-Hans
      var patternSetTips: RswiftResources.StringResource { .init(key: "patternSetTips", tableName: "Localizable", source: source, developmentValue: "Please draw the unlock pattern", comment: nil) }

      /// en translation: Gesture setting successfully
      ///
      /// Key: patternSetupSuccessTips
      ///
      /// Locales: en, zh-Hans
      var patternSetupSuccessTips: RswiftResources.StringResource { .init(key: "patternSetupSuccessTips", tableName: "Localizable", source: source, developmentValue: "Gesture setting successfully", comment: nil) }

      /// en translation: A verification code has been sent to
      ///
      /// Key: phoneCodeInputSubTitle
      ///
      /// Locales: en, zh-Hans
      var phoneCodeInputSubTitle: RswiftResources.StringResource { .init(key: "phoneCodeInputSubTitle", tableName: "Localizable", source: source, developmentValue: "A verification code has been sent to", comment: nil) }

      /// en translation: Phone Verification Code
      ///
      /// Key: phoneVerificationCode
      ///
      /// Locales: en, zh-Hans
      var phoneVerificationCode: RswiftResources.StringResource { .init(key: "phoneVerificationCode", tableName: "Localizable", source: source, developmentValue: "Phone Verification Code", comment: nil) }

      /// en translation: Enter the code
      ///
      /// Key: phoneVerificationCodePlaceholder
      ///
      /// Locales: en, zh-Hans
      var phoneVerificationCodePlaceholder: RswiftResources.StringResource { .init(key: "phoneVerificationCodePlaceholder", tableName: "Localizable", source: source, developmentValue: "Enter the code", comment: nil) }

      /// en translation: Change
      ///
      /// Key: quickUnlockChange
      ///
      /// Locales: en, zh-Hans
      var quickUnlockChange: RswiftResources.StringResource { .init(key: "quickUnlockChange", tableName: "Localizable", source: source, developmentValue: "Change", comment: nil) }

      /// en translation: Face ID
      ///
      /// Key: quickUnlockFaceID
      ///
      /// Locales: en, zh-Hans
      var quickUnlockFaceID: RswiftResources.StringResource { .init(key: "quickUnlockFaceID", tableName: "Localizable", source: source, developmentValue: "Face ID", comment: nil) }

      /// en translation: Set Quick unlock for a faster and more secure verification to protect your account.
      ///
      /// Key: quickUnlockInfo
      ///
      /// Locales: en, zh-Hans
      var quickUnlockInfo: RswiftResources.StringResource { .init(key: "quickUnlockInfo", tableName: "Localizable", source: source, developmentValue: "Set Quick unlock for a faster and more secure verification to protect your account.", comment: nil) }

      /// en translation: Pattern
      ///
      /// Key: quickUnlockPattern
      ///
      /// Locales: en, zh-Hans
      var quickUnlockPattern: RswiftResources.StringResource { .init(key: "quickUnlockPattern", tableName: "Localizable", source: source, developmentValue: "Pattern", comment: nil) }

      /// en translation: Quick Unlock
      ///
      /// Key: quickUnlockTitle
      ///
      /// Locales: en, zh-Hans
      var quickUnlockTitle: RswiftResources.StringResource { .init(key: "quickUnlockTitle", tableName: "Localizable", source: source, developmentValue: "Quick Unlock", comment: nil) }

      /// en translation: Touch ID
      ///
      /// Key: quickUnlockTouchID
      ///
      /// Locales: en, zh-Hans
      var quickUnlockTouchID: RswiftResources.StringResource { .init(key: "quickUnlockTouchID", tableName: "Localizable", source: source, developmentValue: "Touch ID", comment: nil) }

      /// en translation: You have successfully registered.
      ///
      /// Key: registerSuccessTips
      ///
      /// Locales: en, zh-Hans
      var registerSuccessTips: RswiftResources.StringResource { .init(key: "registerSuccessTips", tableName: "Localizable", source: source, developmentValue: "You have successfully registered.", comment: nil) }

      /// en translation: Register
      ///
      /// Key: registerTitle
      ///
      /// Locales: en, zh-Hans
      var registerTitle: RswiftResources.StringResource { .init(key: "registerTitle", tableName: "Localizable", source: source, developmentValue: "Register", comment: nil) }

      /// en translation: Resend
      ///
      /// Key: resend
      ///
      /// Locales: en, zh-Hans
      var resend: RswiftResources.StringResource { .init(key: "resend", tableName: "Localizable", source: source, developmentValue: "Resend", comment: nil) }

      /// en translation: Are you sure to reset Google Authenticator?
      ///
      /// Key: resetAuthTips
      ///
      /// Locales: en, zh-Hans
      var resetAuthTips: RswiftResources.StringResource { .init(key: "resetAuthTips", tableName: "Localizable", source: source, developmentValue: "Are you sure to reset Google Authenticator?", comment: nil) }

      /// en translation: Security Settings
      ///
      /// Key: securitySetting
      ///
      /// Locales: en, zh-Hans
      var securitySetting: RswiftResources.StringResource { .init(key: "securitySetting", tableName: "Localizable", source: source, developmentValue: "Security Settings", comment: nil) }

      /// en translation: Google Authentication
      ///
      /// Key: securitySettingsAuth
      ///
      /// Locales: en, zh-Hans
      var securitySettingsAuth: RswiftResources.StringResource { .init(key: "securitySettingsAuth", tableName: "Localizable", source: source, developmentValue: "Google Authentication", comment: nil) }

      /// en translation: Change Password
      ///
      /// Key: securitySettingsChangePassword
      ///
      /// Locales: en, zh-Hans
      var securitySettingsChangePassword: RswiftResources.StringResource { .init(key: "securitySettingsChangePassword", tableName: "Localizable", source: source, developmentValue: "Change Password", comment: nil) }

      /// en translation: Email
      ///
      /// Key: securitySettingsEmail
      ///
      /// Locales: en, zh-Hans
      var securitySettingsEmail: RswiftResources.StringResource { .init(key: "securitySettingsEmail", tableName: "Localizable", source: source, developmentValue: "Email", comment: nil) }

      /// en translation: To protect your account, it is recommended to turn on at least one 2FA
      ///
      /// Key: securitySettingsInfo
      ///
      /// Locales: en, zh-Hans
      var securitySettingsInfo: RswiftResources.StringResource { .init(key: "securitySettingsInfo", tableName: "Localizable", source: source, developmentValue: "To protect your account, it is recommended to turn on at least one 2FA", comment: nil) }

      /// en translation: Quick unlock
      ///
      /// Key: securitySettingsQuickUnlock
      ///
      /// Locales: en, zh-Hans
      var securitySettingsQuickUnlock: RswiftResources.StringResource { .init(key: "securitySettingsQuickUnlock", tableName: "Localizable", source: source, developmentValue: "Quick unlock", comment: nil) }

      /// en translation: SMS
      ///
      /// Key: securitySettingsSms
      ///
      /// Locales: en, zh-Hans
      var securitySettingsSms: RswiftResources.StringResource { .init(key: "securitySettingsSms", tableName: "Localizable", source: source, developmentValue: "SMS", comment: nil) }

      /// en translation: Two-Factor Authentication (2FA)
      ///
      /// Key: securitySettingsSubTitle
      ///
      /// Locales: en, zh-Hans
      var securitySettingsSubTitle: RswiftResources.StringResource { .init(key: "securitySettingsSubTitle", tableName: "Localizable", source: source, developmentValue: "Two-Factor Authentication (2FA)", comment: nil) }

      /// en translation: Security Settings
      ///
      /// Key: securitySettingsTitle
      ///
      /// Locales: en, zh-Hans
      var securitySettingsTitle: RswiftResources.StringResource { .init(key: "securitySettingsTitle", tableName: "Localizable", source: source, developmentValue: "Security Settings", comment: nil) }

      /// en translation: Security Verification
      ///
      /// Key: securityVerificationTitle
      ///
      /// Locales: en, zh-Hans
      var securityVerificationTitle: RswiftResources.StringResource { .init(key: "securityVerificationTitle", tableName: "Localizable", source: source, developmentValue: "Security Verification", comment: nil) }

      /// en translation: Selfie
      ///
      /// Key: selfie
      ///
      /// Locales: en, zh-Hans
      var selfie: RswiftResources.StringResource { .init(key: "selfie", tableName: "Localizable", source: source, developmentValue: "Selfie", comment: nil) }

      /// en translation: Send Verification Code
      ///
      /// Key: sendVerifyCode
      ///
      /// Locales: en, zh-Hans
      var sendVerifyCode: RswiftResources.StringResource { .init(key: "sendVerifyCode", tableName: "Localizable", source: source, developmentValue: "Send Verification Code", comment: nil) }

      /// en translation: Setting your password
      ///
      /// Key: settingYourPassword
      ///
      /// Locales: en, zh-Hans
      var settingYourPassword: RswiftResources.StringResource { .init(key: "settingYourPassword", tableName: "Localizable", source: source, developmentValue: "Setting your password", comment: nil) }

      /// en translation: Skip
      ///
      /// Key: skip
      ///
      /// Locales: en, zh-Hans
      var skip: RswiftResources.StringResource { .init(key: "skip", tableName: "Localizable", source: source, developmentValue: "Skip", comment: nil) }

      /// en translation: Submit
      ///
      /// Key: submit
      ///
      /// Locales: en, zh-Hans
      var submit: RswiftResources.StringResource { .init(key: "submit", tableName: "Localizable", source: source, developmentValue: "Submit", comment: nil) }

      /// en translation: Switch New Account Login
      ///
      /// Key: switchNewAccountLogin
      ///
      /// Locales: en, zh-Hans
      var switchNewAccountLogin: RswiftResources.StringResource { .init(key: "switchNewAccountLogin", tableName: "Localizable", source: source, developmentValue: "Switch New Account Login", comment: nil) }

      /// en translation: Tips
      ///
      /// Key: tips
      ///
      /// Locales: en, zh-Hans
      var tips: RswiftResources.StringResource { .init(key: "tips", tableName: "Localizable", source: source, developmentValue: "Tips", comment: nil) }

      /// en translation: Verify Phone Number
      ///
      /// Key: toVerifyPhoneNumber
      ///
      /// Locales: en, zh-Hans
      var toVerifyPhoneNumber: RswiftResources.StringResource { .init(key: "toVerifyPhoneNumber", tableName: "Localizable", source: source, developmentValue: "Verify Phone Number", comment: nil) }

      /// en translation: Enter your phone number
      ///
      /// Key: toVerifyPhoneNumberEnterYourNumber
      ///
      /// Locales: en, zh-Hans
      var toVerifyPhoneNumberEnterYourNumber: RswiftResources.StringResource { .init(key: "toVerifyPhoneNumberEnterYourNumber", tableName: "Localizable", source: source, developmentValue: "Enter your phone number", comment: nil) }

      /// en translation: We use your phone number to verify important changes to your account
      ///
      /// Key: toVerifyPhoneNumberTips
      ///
      /// Locales: en, zh-Hans
      var toVerifyPhoneNumberTips: RswiftResources.StringResource { .init(key: "toVerifyPhoneNumberTips", tableName: "Localizable", source: source, developmentValue: "We use your phone number to verify important changes to your account", comment: nil) }

      /// en translation: Verify Phone Number
      ///
      /// Key: toVerifyPhoneNumberTitle
      ///
      /// Locales: en, zh-Hans
      var toVerifyPhoneNumberTitle: RswiftResources.StringResource { .init(key: "toVerifyPhoneNumberTitle", tableName: "Localizable", source: source, developmentValue: "Verify Phone Number", comment: nil) }

      /// en translation: Touch ID
      ///
      /// Key: touchID
      ///
      /// Locales: en, zh-Hans
      var touchID: RswiftResources.StringResource { .init(key: "touchID", tableName: "Localizable", source: source, developmentValue: "Touch ID", comment: nil) }

      /// en translation: Verified
      ///
      /// Key: verified
      ///
      /// Locales: en, zh-Hans
      var verified: RswiftResources.StringResource { .init(key: "verified", tableName: "Localizable", source: source, developmentValue: "Verified", comment: nil) }

      /// en translation: Verify Now
      ///
      /// Key: verifyNow
      ///
      /// Locales: en, zh-Hans
      var verifyNow: RswiftResources.StringResource { .init(key: "verifyNow", tableName: "Localizable", source: source, developmentValue: "Verify Now", comment: nil) }

      /// en translation: Government regulations require us to know more about you
      ///
      /// Key: verifyYourIdentitySubTitle
      ///
      /// Locales: en, zh-Hans
      var verifyYourIdentitySubTitle: RswiftResources.StringResource { .init(key: "verifyYourIdentitySubTitle", tableName: "Localizable", source: source, developmentValue: "Government regulations require us to know more about you", comment: nil) }

      /// en translation: Verify Your Identity
      ///
      /// Key: verifyYourIdentityTitle
      ///
      /// Locales: en, zh-Hans
      var verifyYourIdentityTitle: RswiftResources.StringResource { .init(key: "verifyYourIdentityTitle", tableName: "Localizable", source: source, developmentValue: "Verify Your Identity", comment: nil) }

      /// en translation: WALLET
      ///
      /// Key: wallet
      ///
      /// Locales: en, zh-Hans
      var wallet: RswiftResources.StringResource { .init(key: "wallet", tableName: "Localizable", source: source, developmentValue: "WALLET", comment: nil) }

      /// en translation: Your phone number
      ///
      /// Key: yourPhoneNumber
      ///
      /// Locales: en, zh-Hans
      var yourPhoneNumber: RswiftResources.StringResource { .init(key: "yourPhoneNumber", tableName: "Localizable", source: source, developmentValue: "Your phone number", comment: nil) }

      /// en translation: We use your phone number to verify important changes to your account.
      ///
      /// Key: yourPhoneNumberInfo
      ///
      /// Locales: en, zh-Hans
      var yourPhoneNumberInfo: RswiftResources.StringResource { .init(key: "yourPhoneNumberInfo", tableName: "Localizable", source: source, developmentValue: "We use your phone number to verify important changes to your account.", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 21 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `fw#000000`.
    var fw000000: RswiftResources.ColorResource { .init(name: "fw#000000", path: [], bundle: bundle) }

    /// Color `fw#001214`.
    var fw001214: RswiftResources.ColorResource { .init(name: "fw#001214", path: [], bundle: bundle) }

    /// Color `fw#00191C`.
    var fw00191C: RswiftResources.ColorResource { .init(name: "fw#00191C", path: [], bundle: bundle) }

    /// Color `fw#004396`.
    var fw004396: RswiftResources.ColorResource { .init(name: "fw#004396", path: [], bundle: bundle) }

    /// Color `fw#005960`.
    var fw005960: RswiftResources.ColorResource { .init(name: "fw#005960", path: [], bundle: bundle) }

    /// Color `fw#007481`.
    var fw007481: RswiftResources.ColorResource { .init(name: "fw#007481", path: [], bundle: bundle) }

    /// Color `fw#008999`.
    var fw008999: RswiftResources.ColorResource { .init(name: "fw#008999", path: [], bundle: bundle) }

    /// Color `fw#00A8BB`.
    var fw00A8BB: RswiftResources.ColorResource { .init(name: "fw#00A8BB", path: [], bundle: bundle) }

    /// Color `fw#00A9B5`.
    var fw00A9B5: RswiftResources.ColorResource { .init(name: "fw#00A9B5", path: [], bundle: bundle) }

    /// Color `fw#00C0B3`.
    var fw00C0B3: RswiftResources.ColorResource { .init(name: "fw#00C0B3", path: [], bundle: bundle) }

    /// Color `fw#00DF9C`.
    var fw00DF9C: RswiftResources.ColorResource { .init(name: "fw#00DF9C", path: [], bundle: bundle) }

    /// Color `fw#095CAB`.
    var fw095CAB: RswiftResources.ColorResource { .init(name: "fw#095CAB", path: [], bundle: bundle) }

    /// Color `fw#20B085`.
    var fw20B085: RswiftResources.ColorResource { .init(name: "fw#20B085", path: [], bundle: bundle) }

    /// Color `fw#76A4A7`.
    var fw76A4A7: RswiftResources.ColorResource { .init(name: "fw#76A4A7", path: [], bundle: bundle) }

    /// Color `fw#999999`.
    var fw999999: RswiftResources.ColorResource { .init(name: "fw#999999", path: [], bundle: bundle) }

    /// Color `fw#D3E9F0`.
    var fwD3E9F0: RswiftResources.ColorResource { .init(name: "fw#D3E9F0", path: [], bundle: bundle) }

    /// Color `fw#ED4949`.
    var fwED4949: RswiftResources.ColorResource { .init(name: "fw#ED4949", path: [], bundle: bundle) }

    /// Color `fw#F5F5F7`.
    var fwF5F5F7: RswiftResources.ColorResource { .init(name: "fw#F5F5F7", path: [], bundle: bundle) }

    /// Color `fw#FAFAFA`.
    var fwFAFAFA: RswiftResources.ColorResource { .init(name: "fw#FAFAFA", path: [], bundle: bundle) }

    /// Color `fw#FFFFFF`.
    var fwFFFFFF: RswiftResources.ColorResource { .init(name: "fw#FFFFFF", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 82 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `bg_reg_pic_success`.
    var bg_reg_pic_success: RswiftResources.ImageResource { .init(name: "bg_reg_pic_success", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bg_thanks`.
    var bg_thanks: RswiftResources.ImageResource { .init(name: "bg_thanks", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide_bg_intro_1`.
    var guide_bg_intro_1: RswiftResources.ImageResource { .init(name: "guide_bg_intro_1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide_bg_intro_2`.
    var guide_bg_intro_2: RswiftResources.ImageResource { .init(name: "guide_bg_intro_2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide_bg_intro_3`.
    var guide_bg_intro_3: RswiftResources.ImageResource { .init(name: "guide_bg_intro_3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guide_bg_intro_4`.
    var guide_bg_intro_4: RswiftResources.ImageResource { .init(name: "guide_bg_intro_4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconAddCard`.
    var iconAddCard: RswiftResources.ImageResource { .init(name: "iconAddCard", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconAddress`.
    var iconAddress: RswiftResources.ImageResource { .init(name: "iconAddress", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconBack`.
    var iconBack: RswiftResources.ImageResource { .init(name: "iconBack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconBackInfo`.
    var iconBackInfo: RswiftResources.ImageResource { .init(name: "iconBackInfo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconBiometrics`.
    var iconBiometrics: RswiftResources.ImageResource { .init(name: "iconBiometrics", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconBiometricsNotActivated`.
    var iconBiometricsNotActivated: RswiftResources.ImageResource { .init(name: "iconBiometricsNotActivated", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconBtc`.
    var iconBtc: RswiftResources.ImageResource { .init(name: "iconBtc", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconCard`.
    var iconCard: RswiftResources.ImageResource { .init(name: "iconCard", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconCardDetail`.
    var iconCardDetail: RswiftResources.ImageResource { .init(name: "iconCardDetail", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconCardSetting`.
    var iconCardSetting: RswiftResources.ImageResource { .init(name: "iconCardSetting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconCategory`.
    var iconCategory: RswiftResources.ImageResource { .init(name: "iconCategory", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconCloseButton`.
    var iconCloseButton: RswiftResources.ImageResource { .init(name: "iconCloseButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconCopy`.
    var iconCopy: RswiftResources.ImageResource { .init(name: "iconCopy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconDeposit`.
    var iconDeposit: RswiftResources.ImageResource { .init(name: "iconDeposit", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconDone`.
    var iconDone: RswiftResources.ImageResource { .init(name: "iconDone", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconDownArrow`.
    var iconDownArrow: RswiftResources.ImageResource { .init(name: "iconDownArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconExactitude`.
    var iconExactitude: RswiftResources.ImageResource { .init(name: "iconExactitude", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconExactitudeButton`.
    var iconExactitudeButton: RswiftResources.ImageResource { .init(name: "iconExactitudeButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconExactitudeWhite`.
    var iconExactitudeWhite: RswiftResources.ImageResource { .init(name: "iconExactitudeWhite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconFilterButtonNormal`.
    var iconFilterButtonNormal: RswiftResources.ImageResource { .init(name: "iconFilterButtonNormal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconFilterButtonSelected`.
    var iconFilterButtonSelected: RswiftResources.ImageResource { .init(name: "iconFilterButtonSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconFrom`.
    var iconFrom: RswiftResources.ImageResource { .init(name: "iconFrom", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconGlobal`.
    var iconGlobal: RswiftResources.ImageResource { .init(name: "iconGlobal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconInfo`.
    var iconInfo: RswiftResources.ImageResource { .init(name: "iconInfo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconInfoRed`.
    var iconInfoRed: RswiftResources.ImageResource { .init(name: "iconInfoRed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconLTC`.
    var iconLTC: RswiftResources.ImageResource { .init(name: "iconLTC", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconLink`.
    var iconLink: RswiftResources.ImageResource { .init(name: "iconLink", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconMeSet`.
    var iconMeSet: RswiftResources.ImageResource { .init(name: "iconMeSet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconMore`.
    var iconMore: RswiftResources.ImageResource { .init(name: "iconMore", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconPassport`.
    var iconPassport: RswiftResources.ImageResource { .init(name: "iconPassport", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconPasswordHide`.
    var iconPasswordHide: RswiftResources.ImageResource { .init(name: "iconPasswordHide", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconPasswordShow`.
    var iconPasswordShow: RswiftResources.ImageResource { .init(name: "iconPasswordShow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconProfile`.
    var iconProfile: RswiftResources.ImageResource { .init(name: "iconProfile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconQuFaceId`.
    var iconQuFaceId: RswiftResources.ImageResource { .init(name: "iconQuFaceId", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconQuGesture`.
    var iconQuGesture: RswiftResources.ImageResource { .init(name: "iconQuGesture", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconQuTouchId`.
    var iconQuTouchId: RswiftResources.ImageResource { .init(name: "iconQuTouchId", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconRecordBtn`.
    var iconRecordBtn: RswiftResources.ImageResource { .init(name: "iconRecordBtn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconRefreshButton`.
    var iconRefreshButton: RswiftResources.ImageResource { .init(name: "iconRefreshButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconRegisterCheckboxOff`.
    var iconRegisterCheckboxOff: RswiftResources.ImageResource { .init(name: "iconRegisterCheckboxOff", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconRegisterCheckboxOn`.
    var iconRegisterCheckboxOn: RswiftResources.ImageResource { .init(name: "iconRegisterCheckboxOn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconRightArrowBlue`.
    var iconRightArrowBlue: RswiftResources.ImageResource { .init(name: "iconRightArrowBlue", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconRightArrowGray`.
    var iconRightArrowGray: RswiftResources.ImageResource { .init(name: "iconRightArrowGray", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconRightArrowGreen`.
    var iconRightArrowGreen: RswiftResources.ImageResource { .init(name: "iconRightArrowGreen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconRightArrowWhite`.
    var iconRightArrowWhite: RswiftResources.ImageResource { .init(name: "iconRightArrowWhite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSecurityEmail`.
    var iconSecurityEmail: RswiftResources.ImageResource { .init(name: "iconSecurityEmail", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSecurityEmailNotActivated`.
    var iconSecurityEmailNotActivated: RswiftResources.ImageResource { .init(name: "iconSecurityEmailNotActivated", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSecurityGa`.
    var iconSecurityGa: RswiftResources.ImageResource { .init(name: "iconSecurityGa", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSecurityGaNotActivated`.
    var iconSecurityGaNotActivated: RswiftResources.ImageResource { .init(name: "iconSecurityGaNotActivated", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSecuritySms`.
    var iconSecuritySms: RswiftResources.ImageResource { .init(name: "iconSecuritySms", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSecuritySmsNotActivated`.
    var iconSecuritySmsNotActivated: RswiftResources.ImageResource { .init(name: "iconSecuritySmsNotActivated", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSelfie`.
    var iconSelfie: RswiftResources.ImageResource { .init(name: "iconSelfie", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSell`.
    var iconSell: RswiftResources.ImageResource { .init(name: "iconSell", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconShareButton`.
    var iconShareButton: RswiftResources.ImageResource { .init(name: "iconShareButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconShieldSecurity`.
    var iconShieldSecurity: RswiftResources.ImageResource { .init(name: "iconShieldSecurity", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconSms`.
    var iconSms: RswiftResources.ImageResource { .init(name: "iconSms", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconStatement`.
    var iconStatement: RswiftResources.ImageResource { .init(name: "iconStatement", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconStepDoing`.
    var iconStepDoing: RswiftResources.ImageResource { .init(name: "iconStepDoing", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconStepDone`.
    var iconStepDone: RswiftResources.ImageResource { .init(name: "iconStepDone", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconStepWait`.
    var iconStepWait: RswiftResources.ImageResource { .init(name: "iconStepWait", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconTabbarCard`.
    var iconTabbarCard: RswiftResources.ImageResource { .init(name: "iconTabbarCard", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconTabbarCardSelected`.
    var iconTabbarCardSelected: RswiftResources.ImageResource { .init(name: "iconTabbarCardSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconTabbarHome`.
    var iconTabbarHome: RswiftResources.ImageResource { .init(name: "iconTabbarHome", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconTabbarHomeSelected`.
    var iconTabbarHomeSelected: RswiftResources.ImageResource { .init(name: "iconTabbarHomeSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconTabbarWallet`.
    var iconTabbarWallet: RswiftResources.ImageResource { .init(name: "iconTabbarWallet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconTabbarWalletSelected`.
    var iconTabbarWalletSelected: RswiftResources.ImageResource { .init(name: "iconTabbarWalletSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconTick`.
    var iconTick: RswiftResources.ImageResource { .init(name: "iconTick", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconTickOff`.
    var iconTickOff: RswiftResources.ImageResource { .init(name: "iconTickOff", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconTickOn`.
    var iconTickOn: RswiftResources.ImageResource { .init(name: "iconTickOn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconTimer`.
    var iconTimer: RswiftResources.ImageResource { .init(name: "iconTimer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconUser`.
    var iconUser: RswiftResources.ImageResource { .init(name: "iconUser", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconVerified`.
    var iconVerified: RswiftResources.ImageResource { .init(name: "iconVerified", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconWithdraw`.
    var iconWithdraw: RswiftResources.ImageResource { .init(name: "iconWithdraw", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_faceid`.
    var icon_faceid: RswiftResources.ImageResource { .init(name: "icon_faceid", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lanuchscreen_bg`.
    var lanuchscreen_bg: RswiftResources.ImageResource { .init(name: "lanuchscreen_bg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lanuchscreen_logo`.
    var lanuchscreen_logo: RswiftResources.ImageResource { .init(name: "lanuchscreen_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `userAvator`.
    var userAvator: RswiftResources.ImageResource { .init(name: "userAvator", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `DIN-Bold`.
    var dinBold: RswiftResources.FontResource { .init(name: "DIN-Bold", bundle: bundle, filename: "din-bold.ttf") }

    /// Font `DIN-Regular`.
    var dinRegular: RswiftResources.FontResource { .init(name: "DIN-Regular", bundle: bundle, filename: "din-regular.ttf") }

    /// Font `Roboto-Bold`.
    var robotoBold: RswiftResources.FontResource { .init(name: "Roboto-Bold", bundle: bundle, filename: "Roboto-Bold-3.ttf") }

    /// Font `Roboto-Light`.
    var robotoLight: RswiftResources.FontResource { .init(name: "Roboto-Light", bundle: bundle, filename: "Roboto-Light-10.ttf") }

    /// Font `Roboto-Medium`.
    var robotoMedium: RswiftResources.FontResource { .init(name: "Roboto-Medium", bundle: bundle, filename: "Roboto-Medium-12.ttf") }

    /// Font `Roboto-Regular`.
    var robotoRegular: RswiftResources.FontResource { .init(name: "Roboto-Regular", bundle: bundle, filename: "Roboto-Regular-14.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [dinBold, dinRegular, robotoBold, robotoLight, robotoMedium, robotoRegular].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 6 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Roboto-Bold-3.ttf`.
    var robotoBold3Ttf: RswiftResources.FileResource { .init(name: "Roboto-Bold-3", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Light-10.ttf`.
    var robotoLight10Ttf: RswiftResources.FileResource { .init(name: "Roboto-Light-10", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Medium-12.ttf`.
    var robotoMedium12Ttf: RswiftResources.FileResource { .init(name: "Roboto-Medium-12", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Regular-14.ttf`.
    var robotoRegular14Ttf: RswiftResources.FileResource { .init(name: "Roboto-Regular-14", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `din-bold.ttf`.
    var dinBoldTtf: RswiftResources.FileResource { .init(name: "din-bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `din-regular.ttf`.
    var dinRegularTtf: RswiftResources.FileResource { .init(name: "din-regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 71 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `ApplyCardSuccessViewController`.
    var applyCardSuccessViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ApplyCardSuccessViewController", bundle: bundle) }

    /// Nib `ApplyCardViewController`.
    var applyCardViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ApplyCardViewController", bundle: bundle) }

    /// Nib `BindPhoneViewController`.
    var bindPhoneViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "BindPhoneViewController", bundle: bundle) }

    /// Nib `BiometricsViewController`.
    var biometricsViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "BiometricsViewController", bundle: bundle) }

    /// Nib `CardBagTableViewCell`.
    var cardBagTableViewCell: RswiftResources.NibReference<CardBagTableViewCell> { .init(name: "CardBagTableViewCell", bundle: bundle) }

    /// Nib `CardDetailViewController`.
    var cardDetailViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CardDetailViewController", bundle: bundle) }

    /// Nib `CardSettingTableViewCell`.
    var cardSettingTableViewCell: RswiftResources.NibReference<CardSettingTableViewCell> { .init(name: "CardSettingTableViewCell", bundle: bundle) }

    /// Nib `CardSettingViewController`.
    var cardSettingViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CardSettingViewController", bundle: bundle) }

    /// Nib `CardTableViewCell`.
    var cardTableViewCell: RswiftResources.NibReference<CardTableViewCell> { .init(name: "CardTableViewCell", bundle: bundle) }

    /// Nib `CardViewController`.
    var cardViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CardViewController", bundle: bundle) }

    /// Nib `ChooseCryptoNetworkView`.
    var chooseCryptoNetworkView: RswiftResources.NibReference<ChooseCryptoNetworkView> { .init(name: "ChooseCryptoNetworkView", bundle: bundle) }

    /// Nib `ChooseDateView`.
    var chooseDateView: RswiftResources.NibReference<ChooseDateView> { .init(name: "ChooseDateView", bundle: bundle) }

    /// Nib `ChooseRegionTableViewCell`.
    var chooseRegionTableViewCell: RswiftResources.NibReference<ChooseRegionTableViewCell> { .init(name: "ChooseRegionTableViewCell", bundle: bundle) }

    /// Nib `ChooseRegionViewController`.
    var chooseRegionViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ChooseRegionViewController", bundle: bundle) }

    /// Nib `CryptoNetworkItemTableViewCell`.
    var cryptoNetworkItemTableViewCell: RswiftResources.NibReference<CryptoNetworkItemTableViewCell> { .init(name: "CryptoNetworkItemTableViewCell", bundle: bundle) }

    /// Nib `CryptoTransactionTableViewCell`.
    var cryptoTransactionTableViewCell: RswiftResources.NibReference<CryptoTransactionTableViewCell> { .init(name: "CryptoTransactionTableViewCell", bundle: bundle) }

    /// Nib `CryptoWalletCardView`.
    var cryptoWalletCardView: RswiftResources.NibReference<CryptoWalletCardView> { .init(name: "CryptoWalletCardView", bundle: bundle) }

    /// Nib `CryptoWalletDetailViewController`.
    var cryptoWalletDetailViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CryptoWalletDetailViewController", bundle: bundle) }

    /// Nib `DepositFromTableViewCell`.
    var depositFromTableViewCell: RswiftResources.NibReference<DepositFromTableViewCell> { .init(name: "DepositFromTableViewCell", bundle: bundle) }

    /// Nib `DepositFromView`.
    var depositFromView: RswiftResources.NibReference<DepositFromView> { .init(name: "DepositFromView", bundle: bundle) }

    /// Nib `DepositViewController`.
    var depositViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "DepositViewController", bundle: bundle) }

    /// Nib `EmptyCardTableViewCell`.
    var emptyCardTableViewCell: RswiftResources.NibReference<EmptyCardTableViewCell> { .init(name: "EmptyCardTableViewCell", bundle: bundle) }

    /// Nib `FillInAddressViewController`.
    var fillInAddressViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FillInAddressViewController", bundle: bundle) }

    /// Nib `FillInNameAndNationalViewController`.
    var fillInNameAndNationalViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FillInNameAndNationalViewController", bundle: bundle) }

    /// Nib `ForgotPasswordEmailCheckViewController`.
    var forgotPasswordEmailCheckViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ForgotPasswordEmailCheckViewController", bundle: bundle) }

    /// Nib `FreezeSuccessViewController`.
    var freezeSuccessViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FreezeSuccessViewController", bundle: bundle) }

    /// Nib `GuidePagerViewCell`.
    var guidePagerViewCell: RswiftResources.NibReference<GuidePagerViewCell> { .init(name: "GuidePagerViewCell", bundle: bundle) }

    /// Nib `GuideViewController`.
    var guideViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GuideViewController", bundle: bundle) }

    /// Nib `HomeViewController`.
    var homeViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HomeViewController", bundle: bundle) }

    /// Nib `KYCFillInNameAndNationalViewController`.
    var kycFillInNameAndNationalViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "KYCFillInNameAndNationalViewController", bundle: bundle) }

    /// Nib `KYCFinishViewController`.
    var kycFinishViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "KYCFinishViewController", bundle: bundle) }

    /// Nib `KYCUnAvailableViewController`.
    var kycUnAvailableViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "KYCUnAvailableViewController", bundle: bundle) }

    /// Nib `LanguageSettingViewController`.
    var languageSettingViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "LanguageSettingViewController", bundle: bundle) }

    /// Nib `LanguageTableViewCell`.
    var languageTableViewCell: RswiftResources.NibReference<LanguageTableViewCell> { .init(name: "LanguageTableViewCell", bundle: bundle) }

    /// Nib `LoginViewController`.
    var loginViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "LoginViewController", bundle: bundle) }

    /// Nib `PasswordLoginViewController`.
    var passwordLoginViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PasswordLoginViewController", bundle: bundle) }

    /// Nib `QuickUnlockTableViewCell`.
    var quickUnlockTableViewCell: RswiftResources.NibReference<QuickUnlockTableViewCell> { .init(name: "QuickUnlockTableViewCell", bundle: bundle) }

    /// Nib `QuickUnlockViewController`.
    var quickUnlockViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "QuickUnlockViewController", bundle: bundle) }

    /// Nib `RecentTransactionsTableViewCell`.
    var recentTransactionsTableViewCell: RswiftResources.NibReference<RecentTransactionsTableViewCell> { .init(name: "RecentTransactionsTableViewCell", bundle: bundle) }

    /// Nib `RegisterSuccessViewController`.
    var registerSuccessViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "RegisterSuccessViewController", bundle: bundle) }

    /// Nib `RegisterViewController`.
    var registerViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "RegisterViewController", bundle: bundle) }

    /// Nib `SecurityCollectionViewCell`.
    var securityCollectionViewCell: RswiftResources.NibReference<SecurityCollectionViewCell> { .init(name: "SecurityCollectionViewCell", bundle: bundle) }

    /// Nib `SecuritySettingsViewController`.
    var securitySettingsViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SecuritySettingsViewController", bundle: bundle) }

    /// Nib `SecurityVerificationItemTableViewCell`.
    var securityVerificationItemTableViewCell: RswiftResources.NibReference<SecurityVerificationItemTableViewCell> { .init(name: "SecurityVerificationItemTableViewCell", bundle: bundle) }

    /// Nib `SecurityVerificationViewController`.
    var securityVerificationViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SecurityVerificationViewController", bundle: bundle) }

    /// Nib `SellCryptoConfirmView`.
    var sellCryptoConfirmView: RswiftResources.NibReference<SellCryptoConfirmView> { .init(name: "SellCryptoConfirmView", bundle: bundle) }

    /// Nib `SellCryptoViewController`.
    var sellCryptoViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SellCryptoViewController", bundle: bundle) }

    /// Nib `SellDetailItemTableViewCell`.
    var sellDetailItemTableViewCell: RswiftResources.NibReference<SellDetailItemTableViewCell> { .init(name: "SellDetailItemTableViewCell", bundle: bundle) }

    /// Nib `SellDetailOrderItemTableViewCell`.
    var sellDetailOrderItemTableViewCell: RswiftResources.NibReference<SellDetailOrderItemTableViewCell> { .init(name: "SellDetailOrderItemTableViewCell", bundle: bundle) }

    /// Nib `SellDetailOrderTableViewCell`.
    var sellDetailOrderTableViewCell: RswiftResources.NibReference<SellDetailOrderTableViewCell> { .init(name: "SellDetailOrderTableViewCell", bundle: bundle) }

    /// Nib `SettingNewPasswordViewController`.
    var settingNewPasswordViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SettingNewPasswordViewController", bundle: bundle) }

    /// Nib `SettingPasswordTipsTableViewCell`.
    var settingPasswordTipsTableViewCell: RswiftResources.NibReference<SettingPasswordTipsTableViewCell> { .init(name: "SettingPasswordTipsTableViewCell", bundle: bundle) }

    /// Nib `SettingPasswordViewController`.
    var settingPasswordViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SettingPasswordViewController", bundle: bundle) }

    /// Nib `TransactionItemTableViewCell`.
    var transactionItemTableViewCell: RswiftResources.NibReference<TransactionItemTableViewCell> { .init(name: "TransactionItemTableViewCell", bundle: bundle) }

    /// Nib `TransactionTableViewCell`.
    var transactionTableViewCell: RswiftResources.NibReference<TransactionTableViewCell> { .init(name: "TransactionTableViewCell", bundle: bundle) }

    /// Nib `TransactionsDetailViewController`.
    var transactionsDetailViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "TransactionsDetailViewController", bundle: bundle) }

    /// Nib `TransactionsFilterBoardView`.
    var transactionsFilterBoardView: RswiftResources.NibReference<TransactionsFilterBoardView> { .init(name: "TransactionsFilterBoardView", bundle: bundle) }

    /// Nib `TransactionsFilterCollectionViewCell`.
    var transactionsFilterCollectionViewCell: RswiftResources.NibReference<TransactionsFilterCollectionViewCell> { .init(name: "TransactionsFilterCollectionViewCell", bundle: bundle) }

    /// Nib `TransactionsFilterDateCollectionViewCell`.
    var transactionsFilterDateCollectionViewCell: RswiftResources.NibReference<TransactionsFilterDateCollectionViewCell> { .init(name: "TransactionsFilterDateCollectionViewCell", bundle: bundle) }

    /// Nib `TransactionsFilterViewController`.
    var transactionsFilterViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "TransactionsFilterViewController", bundle: bundle) }

    /// Nib `TransactionsViewController`.
    var transactionsViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "TransactionsViewController", bundle: bundle) }

    /// Nib `UserCenterViewController`.
    var userCenterViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "UserCenterViewController", bundle: bundle) }

    /// Nib `VerificationCodeViewController`.
    var verificationCodeViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "VerificationCodeViewController", bundle: bundle) }

    /// Nib `VerifyYourIdentityGuideViewController`.
    var verifyYourIdentityGuideViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "VerifyYourIdentityGuideViewController", bundle: bundle) }

    /// Nib `WalletCardTableViewCell`.
    var walletCardTableViewCell: RswiftResources.NibReference<WalletCardTableViewCell> { .init(name: "WalletCardTableViewCell", bundle: bundle) }

    /// Nib `WalletCryptoItemTableViewCell`.
    var walletCryptoItemTableViewCell: RswiftResources.NibReference<WalletCryptoItemTableViewCell> { .init(name: "WalletCryptoItemTableViewCell", bundle: bundle) }

    /// Nib `WalletCryptoTableViewCell`.
    var walletCryptoTableViewCell: RswiftResources.NibReference<WalletCryptoTableViewCell> { .init(name: "WalletCryptoTableViewCell", bundle: bundle) }

    /// Nib `WalletTransactionsContentViewController`.
    var walletTransactionsContentViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "WalletTransactionsContentViewController", bundle: bundle) }

    /// Nib `WalletTransactionsViewController`.
    var walletTransactionsViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "WalletTransactionsViewController", bundle: bundle) }

    /// Nib `WalletViewController`.
    var walletViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "WalletViewController", bundle: bundle) }

    /// Nib `WithdrawViewController`.
    var withdrawViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "WithdrawViewController", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "iconCard", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconCard' is used in nib 'ApplyCardSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconTick", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconTick' is used in nib 'ApplyCardSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'ApplyCardSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'ApplyCardSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'ApplyCardSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconExactitude", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconExactitude' is used in nib 'ApplyCardViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconInfo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconInfo' is used in nib 'ApplyCardViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'ApplyCardViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'ApplyCardViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'ApplyCardViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconDownArrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconDownArrow' is used in nib 'BindPhoneViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconInfo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconInfo' is used in nib 'BindPhoneViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'BindPhoneViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'BindPhoneViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'BindPhoneViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon_faceid", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_faceid' is used in nib 'BiometricsViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconBackInfo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconBackInfo' is used in nib 'CardBagTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconCardDetail", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconCardDetail' is used in nib 'CardBagTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconDeposit", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconDeposit' is used in nib 'CardBagTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconStatement", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconStatement' is used in nib 'CardBagTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'CardBagTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'CardBagTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRightArrowBlue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRightArrowBlue' is used in nib 'CardSettingTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'CardSettingTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'CardSettingTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FAFAFA", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FAFAFA' is used in nib 'CardSettingTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'CardSettingViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FAFAFA", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FAFAFA' is used in nib 'CardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'CardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconCardSetting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconCardSetting' is used in nib 'CardViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'ChooseCryptoNetworkView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'ChooseCryptoNetworkView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#76A4A7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#76A4A7' is used in nib 'ChooseCryptoNetworkView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'ChooseDateView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#76A4A7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#76A4A7' is used in nib 'ChooseDateView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'ChooseDateView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'ChooseRegionTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'ChooseRegionViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'ChooseRegionViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconBtc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconBtc' is used in nib 'CryptoNetworkItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRightArrowGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRightArrowGreen' is used in nib 'CryptoNetworkItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'CryptoNetworkItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#76A4A7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#76A4A7' is used in nib 'CryptoNetworkItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconBtc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconBtc' is used in nib 'CryptoTransactionTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'CryptoTransactionTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00DF9C", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00DF9C' is used in nib 'CryptoTransactionTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#999999", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#999999' is used in nib 'CryptoTransactionTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconDeposit", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconDeposit' is used in nib 'CryptoWalletCardView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconSell", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconSell' is used in nib 'CryptoWalletCardView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconWithdraw", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconWithdraw' is used in nib 'CryptoWalletCardView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'CryptoWalletCardView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00DF9C", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00DF9C' is used in nib 'CryptoWalletCardView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'CryptoWalletCardView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconBtc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconBtc' is used in nib 'DepositFromTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRightArrowGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRightArrowGreen' is used in nib 'DepositFromTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'DepositFromTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#D3E9F0", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#D3E9F0' is used in nib 'DepositFromTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRecordBtn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRecordBtn' is used in nib 'DepositFromView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'DepositFromView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#76A4A7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#76A4A7' is used in nib 'DepositFromView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'DepositFromView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconBtc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconBtc' is used in nib 'DepositViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconDownArrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconDownArrow' is used in nib 'DepositViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconInfo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconInfo' is used in nib 'DepositViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconLink", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconLink' is used in nib 'DepositViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'DepositViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'DepositViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'DepositViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#D3E9F0", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#D3E9F0' is used in nib 'DepositViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconAddCard", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconAddCard' is used in nib 'EmptyCardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'EmptyCardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FAFAFA", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FAFAFA' is used in nib 'EmptyCardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'EmptyCardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'FillInAddressViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'FillInAddressViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconInfo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconInfo' is used in nib 'FillInNameAndNationalViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'FillInNameAndNationalViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'FillInNameAndNationalViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'FillInNameAndNationalViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'ForgotPasswordEmailCheckViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'ForgotPasswordEmailCheckViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'ForgotPasswordEmailCheckViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconDone", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconDone' is used in nib 'FreezeSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'FreezeSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'FreezeSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'FreezeSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "guide_bg_intro_3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'guide_bg_intro_3' is used in nib 'GuidePagerViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'GuidePagerViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "colorFFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'colorFFFFFF' is used in nib 'GuideViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A9B5", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A9B5' is used in nib 'GuideViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconMeSet", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconMeSet' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconInfo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconInfo' is used in nib 'KYCFillInNameAndNationalViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'KYCFillInNameAndNationalViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00191C", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00191C' is used in nib 'KYCFillInNameAndNationalViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'KYCFillInNameAndNationalViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#ED4949", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#ED4949' is used in nib 'KYCFillInNameAndNationalViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'KYCFillInNameAndNationalViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconProfile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconProfile' is used in nib 'KYCFinishViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconTick", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconTick' is used in nib 'KYCFinishViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'KYCFinishViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'KYCFinishViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'KYCFinishViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconProfile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconProfile' is used in nib 'KYCUnAvailableViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'KYCUnAvailableViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'KYCUnAvailableViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'KYCUnAvailableViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'LanguageSettingViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconExactitude", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconExactitude' is used in nib 'LanguageTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'LanguageTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'LoginViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'LoginViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'LoginViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "userAvator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'userAvator' is used in nib 'PasswordLoginViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'PasswordLoginViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'PasswordLoginViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconQuFaceId", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconQuFaceId' is used in nib 'QuickUnlockTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'QuickUnlockTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconInfo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconInfo' is used in nib 'QuickUnlockViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconQuFaceId", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconQuFaceId' is used in nib 'QuickUnlockViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconQuGesture", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconQuGesture' is used in nib 'QuickUnlockViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRightArrowBlue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRightArrowBlue' is used in nib 'QuickUnlockViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'QuickUnlockViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'QuickUnlockViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'RecentTransactionsTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "bg_reg_pic_success", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bg_reg_pic_success' is used in nib 'RegisterSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "bg_thanks", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bg_thanks' is used in nib 'RegisterSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconInfo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconInfo' is used in nib 'RegisterSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'RegisterSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'RegisterSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'RegisterSuccessViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRegisterCheckboxOff", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRegisterCheckboxOff' is used in nib 'RegisterViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRegisterCheckboxOn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRegisterCheckboxOn' is used in nib 'RegisterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'RegisterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#ED4949", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#ED4949' is used in nib 'RegisterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'RegisterViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconBiometrics", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconBiometrics' is used in nib 'SecurityCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRightArrowBlue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRightArrowBlue' is used in nib 'SecurityCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconTick", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconTick' is used in nib 'SecurityCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'SecurityCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'SecurityCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconInfo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconInfo' is used in nib 'SecuritySettingsViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRightArrowBlue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRightArrowBlue' is used in nib 'SecuritySettingsViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'SecuritySettingsViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconInfo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconInfo' is used in nib 'SecurityVerificationItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'SecurityVerificationItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'SecurityVerificationItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'SecurityVerificationItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'SecurityVerificationViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'SellCryptoConfirmView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FAFAFA", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FAFAFA' is used in nib 'SellCryptoConfirmView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconBtc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconBtc' is used in nib 'SellCryptoViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconDownArrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconDownArrow' is used in nib 'SellCryptoViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'SellCryptoViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00191C", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00191C' is used in nib 'SellCryptoViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'SellCryptoViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#999999", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#999999' is used in nib 'SellCryptoViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'SellCryptoViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconBtc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconBtc' is used in nib 'SellDetailItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconExactitudeWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconExactitudeWhite' is used in nib 'SellDetailItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconStepDone", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconStepDone' is used in nib 'SellDetailItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'SellDetailItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#20B085", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#20B085' is used in nib 'SellDetailItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FAFAFA", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FAFAFA' is used in nib 'SellDetailItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconCopy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconCopy' is used in nib 'SellDetailOrderItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'SellDetailOrderItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'SellDetailOrderItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'SellDetailOrderTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'SettingNewPasswordViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'SettingNewPasswordViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'SettingNewPasswordViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconTickOff", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconTickOff' is used in nib 'SettingPasswordTipsTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'SettingPasswordTipsTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'SettingPasswordViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#ED4949", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#ED4949' is used in nib 'SettingPasswordViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'SettingPasswordViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "#999999", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named '#999999' is used in nib 'TransactionItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'TransactionTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A9B5", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A9B5' is used in nib 'TransactionTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#999999", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#999999' is used in nib 'TransactionTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'TransactionsFilterBoardView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#F5F5F7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#F5F5F7' is used in nib 'TransactionsFilterBoardView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'TransactionsFilterBoardView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'TransactionsFilterCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRightArrowWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRightArrowWhite' is used in nib 'TransactionsFilterDateCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#F5F5F7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#F5F5F7' is used in nib 'TransactionsFilterDateCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'TransactionsFilterDateCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'TransactionsViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#F5F5F7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#F5F5F7' is used in nib 'TransactionsViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'TransactionsViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconCategory", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconCategory' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconGlobal", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconGlobal' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRightArrowBlue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRightArrowBlue' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRightArrowGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRightArrowGreen' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconShieldSecurity", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconShieldSecurity' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconSms", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconSms' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconVerified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconVerified' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "userAvator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'userAvator' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00DF9C", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00DF9C' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#ED4949", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#ED4949' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'UserCenterViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'VerificationCodeViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#001214", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#001214' is used in nib 'VerificationCodeViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'VerificationCodeViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#ED4949", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#ED4949' is used in nib 'VerificationCodeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconAddress", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconAddress' is used in nib 'VerifyYourIdentityGuideViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconPassport", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconPassport' is used in nib 'VerifyYourIdentityGuideViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconProfile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconProfile' is used in nib 'VerifyYourIdentityGuideViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconSelfie", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconSelfie' is used in nib 'VerifyYourIdentityGuideViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconUser", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconUser' is used in nib 'VerifyYourIdentityGuideViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'VerifyYourIdentityGuideViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'VerifyYourIdentityGuideViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'VerifyYourIdentityGuideViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconDeposit", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconDeposit' is used in nib 'WalletCardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconSell", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconSell' is used in nib 'WalletCardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconWithdraw", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconWithdraw' is used in nib 'WalletCardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'WalletCardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'WalletCardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FAFAFA", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FAFAFA' is used in nib 'WalletCardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'WalletCardTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconBtc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconBtc' is used in nib 'WalletCryptoItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconRightArrowBlue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconRightArrowBlue' is used in nib 'WalletCryptoItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'WalletCryptoTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'WalletTransactionsViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'WalletTransactionsViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#F5F5F7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#F5F5F7' is used in nib 'WalletTransactionsViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'WalletTransactionsViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconBtc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconBtc' is used in nib 'WithdrawViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconDownArrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconDownArrow' is used in nib 'WithdrawViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconInfo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconInfo' is used in nib 'WithdrawViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#000000", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#000000' is used in nib 'WithdrawViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00191C", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00191C' is used in nib 'WithdrawViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#00A8BB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#00A8BB' is used in nib 'WithdrawViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#999999", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#999999' is used in nib 'WithdrawViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "fw#FFFFFF", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'fw#FFFFFF' is used in nib 'WithdrawViewController', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "lanuchscreen_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'lanuchscreen_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lanuchscreen_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'lanuchscreen_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }
  }
}